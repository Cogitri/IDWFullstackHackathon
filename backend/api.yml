openapi: 3.0.0
info:
  description: |
    API for Go Local Store
  version: "1.0.0"
  title: Local Farm Productstore
  license:
    name: AGPL-3.0-or-later
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/fhkielidw/IDW/1.0.0
  - url: "https://productstore.swagger.io/v2"
tags:
  - name: user
    description: User (farmer or customer)
  - name: product
  - name: store
paths:
  /product:
    post:
      tags:
        - product
      summary: Add a new product to the store or edit already existing one
      operationId: addOrEditProduct
      responses:
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: string
        "201":
          description: Successfully created new/edited existing product
      security:
        - JWT:
            - "write:product"
            - "read:product"
      requestBody:
        $ref: "#/components/requestBodies/Product"
  # Maybe PUT won't be needed
  #  put:
  #    tags:
  #      - product
  #    summary: Update an existing product
  #    operationId: updateProduct
  #    responses:
  #      "400":
  #        description: Invalid ID supplied
  #      "404":
  #        description: Product not found
  #      "405":
  #        description: Validation exception
  #    security:
  #      - productstore_auth:
  #          - "write:product"
  #          - "read:product"
  #    requestBody:
  #      $ref: "#/components/requestBodies/Product"
  # Disabled for now, we probably don't need this for the MVP
  #/product/findByStatus:
  #  get:
  #    tags:
  #      - product
  #    summary: Finds products by status
  #    description: Multiple status values can be provided with comma separated strings
  #    operationId: findProductByStatus
  #    parameters:
  #      - name: status
  #        in: query
  #        description: Status values that need to be considered for filter
  #        required: true
  #        explode: true
  #        schema:
  #          type: array
  #          items:
  #            type: string
  #            enum:
  #              - available
  #              - pending
  #              - sold
  #            default: available
  #    responses:
  #      '200':
  #        description: successful operation
  #        content:
  #          application/json:
  #            schema:
  #              type: array
  #              items:
  #                $ref: '#/components/schemas/Product'
  #          application/xml:
  #            schema:
  #              type: array
  #              items:
  #                $ref: '#/components/schemas/Product'
  #      '400':
  #        description: Invalid status value
  #    security:
  #      - productstore_auth:
  #          - 'write:product'
  #          - 'read:product'
  # /product/findByTags:
  #   get:
  #     summary: Finds Products by tags
  #     description: >-
  #       Muliple tags can be provided with comma separated strings. Use\ \ tag1,
  #       tag2, tag3 for testing.
  #     operationId: findProductsByTags
  #     parameters:
  #       - name: tags
  #         in: query
  #         description: Tags to filter by
  #         required: true
  #         explode: true
  #         schema:
  #           type: array
  #           items:
  #             type: string
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Product'
  #           application/xml:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Product'
  #       '400':
  #         description: Invalid tag value
  #     security:
  #       - productstore_auth:
  #           - 'write:product'
  #           - 'read:product'
  #     deprecated: true
  "/product/{productId}":
    get:
      tags:
        - product
      summary: Find product by ID
      description: Returns a single product
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
            application/xml:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Invalid ID supplied
        "404":
          description: Product not found
      security:
        - JWT:
          - "read:products"
    delete:
      tags:
        - product
      summary: Deletes a product
      operationId: deleteProduct
      parameters:
  #      - name: api_key
  #        in: header
  #        required: false
  #        schema:
  #          type: string
        - name: productId
          in: path
          description: Product ID to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Product not found
        "204":
          description: Product successfully deleted
      security:
        - JWT:
            - "write:products"
            - "read:products"
  # Disabled for now, we probably only want to have links for pictures
  # '/product/{productId}/uploadImage':
  #   post:
  #     tags:
  #       - product
  #     summary: uploads an image
  #     operationId: uploadFile
  #     parameters:
  #       - name: productId
  #         in: path
  #         description: ID of product to update
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ApiResponse'
  #     security:
  #       - productstore_auth:
  #           - 'write:products'
  #           - 'read:products'
  #     requestBody:
  #       content:
  #         application/octet-stream:
  #           schema:
  #             type: string
  #             format: binary
  #/store/inventory:
  #  get:
  #    tags:
  #      - store
  #    summary: Returns product inventories by status
  #    description: Returns a map of status codes to quantities
  #    operationId: getInventory
  #    responses:
  #      '200':
  #        description: successful operation
  #        content:
  #          application/json:
  #            schema:
  #              type: object
  #              additionalProperties:
  #                type: integer
  #                format: int32
  #    security:
  #      - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a product
      operationId: placeOrder
      responses:
        "201":
          description: Operation successfull
        "400":
          description: Invalid Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
        description: order placed for purchasing the product
        required: true
  "/store/order/{orderId}":
    get:
      tags:
        - store
      summary: Find purchase order by ID
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of product that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
  #    delete:
  #      tags:
  #        - store
  #      summary: Delete purchase order by ID
  #      operationId: deleteOrder
  #      parameters:
  #        - name: orderId
  #          in: path
  #          description: ID of the order that needs to be deleted
  #          required: true
  #          schema:
  #            type: integer
  #            format: int64
  #            minimum: 1
  #      responses:
  #        '400':
  #          description: Invalid ID supplied
  #        '404':
  #          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      operationId: createUser
      responses:
        "201":
          description: sucessfully created user
        "400":
          description: supplied invalid data
          content:
            application/json:
              schema:
                type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Created user object
        required: true
    put:
      tags:
        - user
      summary: Update user information
      description: This can only be done by the logged-in user.
      operationId: updateUser
      responses:
        "200":
          description: Sucessfully updated user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid user supplied
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Updated user object
        required: true
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      # Login via HTTP post form
      responses:
        "200":
          description: successful operation
          #       headers:
          #         X-Rate-Limit:
          #           description: calls per hour allowed by the user
          #           schema:
          #             type: integer
          #             format: int32
          #         X-Expires-After:
          #           description: date in UTC when token expires
          #           schema:
          #             type: string
          #             format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out currently logged-in user
      operationId: logoutUser
      parameters:
        - name: username
          in: query
          description: The name that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: sucessfully logged user out
  "/user/{username}":
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        products:
          type: array
          items:
            $ref: "#/components/schemas/ProductAndAmount"
        orderDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - completed
        customerId:
          type: integer
          format: int64
        farmerId:
          type: integer
          format: int64
        totalPrice:
          type: integer
          format: int64
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        passwordHash:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        longitude:
          type: integer
          format: float
        latitude:
          type: integer
          format: float
      xml:
        name: User
    Customer:
      type: object
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
      xml:
        name: Customer
    ProductAndAmount:
      type: object
      properties:
        productId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
    Farmer:
      type: object
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
      properties:
        products:
          type: array
          items:
            $ref: "#/components/schemas/ProductAndAmount"
        farmingMethodology:
          type: string
        covidGuidelines:
          type: string
      xml:
        name: Farmer
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Product:
      type: object
      required:
        - name
        - price
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: "#/components/schemas/Category"
        name:
          type: string
          example: carrot
        description:
          type: string
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: "#/components/schemas/Tag"
        expiryDate:
          type: string
        manufacturingDate:
          type: string
        paymentMethod:
          type: string
        deliveryMethod:
          type: string
        status:
          type: string
          description: product status in the store
          enum:
            - available
            - outofstock
            - sold
        price:
          type: integer
          format: int64
      xml:
        name: Product
  #    ApiResponse:
  #      type: object
  #      properties:
  #        code:
  #          type: integer
  #          format: int32
  #        type:
  #         type: string
  #        message:
  #          type: string
  requestBodies:
    Product:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Product"
        application/xml:
          schema:
            $ref: "#/components/schemas/Product"
      description: Product object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
      description: List of user object
      required: true
  securitySchemes:
    JWT:
      type: apiKey
      name: api_key
      in: header
